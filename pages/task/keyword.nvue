<template>
	<view class="container">
		<!-- 自定义导航栏 -->
		<view class="nav-bar" :style="{ paddingTop: statusBarHeight + 10 + 'px' }">
			<view class="nav-content">
				<!-- 左侧返回按钮 -->
				<view class="nav-left" @click="onBackClick">
					<u-icon name="arrow-left" size="20" color="#333333"></u-icon>
				</view>
				<!-- 居中标题 -->
				<text class="nav-title">搜索结果</text>
				<!-- 右侧记录按钮 -->
				<view class="nav-right" @click="onRecordClick">
					<u-icon name="file-text" size="22" color="#333333"></u-icon>
				</view>
			</view>
		</view>
		
		<!-- 搜索条件区域 -->
		
		<view class="search-area">
			<!-- 弹窗 -->
	<up-modal
		:show="showModal"
		:content="modalContent"
		:closeOnClickOverlay="true"
		showCancelButton
		@confirm="gotoList"
		@cancel="closeModal"
		confirmText="查看列表"
		cancelText="确定"
	></up-modal>
			<!-- 当前位置选择 -->
			<view class="search-item" @click="showPicker">
				<view class="input-box">
					<text class="input-box-text" v-if="realRegion.province">
						{{realRegion.province}}-{{realRegion.city}}-{{realRegion.district}}
					</text>
					<text class="input-box-text" v-else>
						选择省市区
					</text>
				</view>
			</view>
			
			<!-- 关键词搜索 -->
			<view class="search-item">
				<view class="input-box">
					<input 
						class="search-item-input"
						type="text"
						style="font-size: 14px;"
						v-model="keyword"
						placeholder="请输入关键词"
						placeholder-class="placeholder"
					/>
				</view>
			</view>
		</view>
		
		<!-- 地图区域 -->
		<view class="map-container">
			<map 
				id="map" 
				class="map"
				:latitude="mapState.latitude"
				:longitude="mapState.longitude"
				:markers="mapState.markers"
				:scale="mapState.scale"
				@markertap="onMarkerTap"
				show-location
			></map>
		</view>
		
		<!-- 底部按钮 -->
		<view class="footer">
			<text class="collect-btn" @tap="startCollect">开始采集</text>
		</view>

		<!-- 省市区选择器 -->
		<view class="picker-container" v-if="show">
			<up-picker 
				:show="show" 
				ref="uPickerRef" 
				:columns="columns" 
				@cancel="cancel" 
				@confirm="confirm"
				@change="changeHandler"
				:defaultIndex="defaultCityArray"
			></up-picker>
		</view>
	</view>


</template>

<script setup>
import { reactive, ref, onMounted, watch } from 'vue'
// import { useCollectStore } from '@/stores/collect'
import { addressList } from './cityData.js'
import { formatDate } from '@/utils/date'

const collect_batch_id = ref('')
const defaultCityArray = ref([])
const gotoList = () => {
    // 将采集数据和位置信息存储到本地
    uni.setStorageSync('collectedItems', collectedItems.value)
    // 修改这里，保存省市区信息
    const address = realRegion.province && realRegion.city && realRegion.district ? 
        `${realRegion.province}-${realRegion.city}-${realRegion.district}` : 
        '未选择地址'
    uni.setStorageSync('collectInfo', address)
    uni.setStorageSync('searchKeyword', keyword.value)
	 uni.setStorageSync('industry_name', '')
    uni.navigateTo({
       url: `/pages/task/list?collect_batch_id=${collect_batch_id.value}`
    })
}

// const collectStore = useCollectStore()
const show = ref(false);
const loading = ref(false);

// 用来存储选择的数据
const selectedRegion = reactive({
  province: null,
  city: null,
  cityCode: null,
  district: null,
  districtCode: null,
  provinceIndex: null,
  provinceCode: null,
  cityIndex: null,
  districtIndex: null
});

const realRegion = reactive({
    province: null,
  city: null,
  cityCode: null,
  district: null,
  districtCode: null,
  provinceIndex: null,
  provinceCode: null,
  cityIndex: null,
  districtIndex: null
});

// 省市区数据
const regionData = addressList

// 初始化 columns
const columns = reactive([[], [], []]);

// 填充省级数据
const fillProvinceData = () => {
  columns[0] = regionData.map(item => item.name);
};

// 填充市级数据
const fillCityData = (provinceIndex) => {
  const province = regionData[provinceIndex];
  columns[1] = province.children.map(item => item.name);
};

// 填充区级数据
const fillDistrictData = (provinceIndex, cityIndex) => {
  const city = regionData[provinceIndex].children[cityIndex];
  columns[2] = city.children.map(item => item.name);
};

// 更新 selectedRegion 的值
const updateSelectedRegion = (provinceIndex, cityIndex, districtIndex) => {
  const province = regionData[provinceIndex];
  const city = province.children[cityIndex];
  const district = city.children[districtIndex];

//   console.log(province, city, district,'0000');
  selectedRegion.province = province.name;
  selectedRegion.provinceCode = province.code;
  selectedRegion.city = city.name;
  selectedRegion.cityCode = city.code;
  selectedRegion.district = district ? district.name : null;
  selectedRegion.districtCode = district ? district.code : null;
  selectedRegion.provinceIndex = provinceIndex;
  selectedRegion.cityIndex = cityIndex;
  selectedRegion.districtIndex = districtIndex;
};

// 初始化时填充省级数据并选择默认项
const initializePicker = () => {
  fillProvinceData();
  
  // 默认选择第一个省
  const defaultProvinceIndex = 0;
  const defaultCityIndex = 0;
  const defaultDistrictIndex = 0;

  // 填充市级数据
  fillCityData(defaultProvinceIndex);
  
  // 填充区级数据
  fillDistrictData(defaultProvinceIndex, defaultCityIndex);

  // 更新 selectedRegion
  updateSelectedRegion(defaultProvinceIndex, defaultCityIndex, defaultDistrictIndex);
};

// 监听省市区选择的变化
const changeHandler = (e) => {
  const { columnIndex, index } = e;

  if (columnIndex === 0) {
    // 更新市和区
    fillCityData(index);
    fillDistrictData(index, 0); // 默认选择市的第一个区
    updateSelectedRegion(index, 0, 0);
  } else if (columnIndex === 1) {
    // 更新区
    fillDistrictData(selectedRegion.provinceIndex, index);
    updateSelectedRegion(selectedRegion.provinceIndex, index, 0);
  } else if (columnIndex === 2) {
    // 更新区选择
    updateSelectedRegion(selectedRegion.provinceIndex, selectedRegion.cityIndex, index);
  }
};



// 处理确认选择的逻辑
const confirm = async (e) => {
    // 更新区域信息
	defaultCityArray.value = [selectedRegion.provinceIndex, selectedRegion.cityIndex, selectedRegion.districtIndex]
    realRegion.province = selectedRegion.province;
    realRegion.city = selectedRegion.city;
    realRegion.district = selectedRegion.district;
    realRegion.provinceCode = selectedRegion.provinceCode;
    realRegion.cityCode = selectedRegion.cityCode;
    realRegion.districtCode = selectedRegion.districtCode;
    realRegion.provinceIndex = selectedRegion.provinceIndex;
    realRegion.cityIndex = selectedRegion.cityIndex;
    realRegion.districtIndex = selectedRegion.districtIndex;

    // 关闭选择器
    show.value = false;

    // 显示加载提示
    uni.showLoading({
        title: '定位中...'
    });

    try {
        // 使用高德地图 API 获取选中区域的中心点坐标
        const res = await uni.request({
            url: 'https://restapi.amap.com/v3/geocode/geo',
            method: 'GET',
            data: {
                key: '7d6f9f3723fc6572aaf13328ba8a504e',
                address: realRegion.district || realRegion.city,
                city: realRegion.city
            }
        });

        if (res.data.status === '1' && res.data.geocodes && res.data.geocodes[0]) {
            const location = res.data.geocodes[0].location.split(',');
            const longitude = parseFloat(location[0]);
            const latitude = parseFloat(location[1]);

            // 更新地图状态
            mapState.latitude = latitude;
            mapState.longitude = longitude;
            
            // 更新地图标记
            mapState.markers = [{
                id: 'current',
                latitude: latitude,
                longitude: longitude,
                iconPath: '/static/local.png',
                // #ifdef H5
                width: 20,
                height: 20,
                // #endif
                // #ifdef APP-PLUS
                anchor: {
                    x: 0.5,
                    y: 0.5
                },
                width: '20px',
                height: '20px',
                // #endif
                callout: {
                    content: realRegion.district || realRegion.city,
                    color: '#000000',
                    fontSize: 14,
                    borderRadius: 4,
                    padding: 8,
                    display: 'ALWAYS'
                }
            }];

            // 更新圆形范围
            mapState.circles = [{
                latitude: latitude,
                longitude: longitude,
                color: '#1989fa66',
                fillColor: '#1989fa22',
                radius: selectedDistance.value * 1000,
                strokeWidth: 2
            }];
        }
    } catch (error) {
        console.error('获取区域中心点失败:', error);
        uni.showToast({
            title: '定位失败',
            icon: 'none'
        });
    } finally {
        uni.hideLoading();
    }
};

// 初始化选择器
initializePicker();


const showPicker = () => {
	show.value = true;
}

const cancel = () => {
	show.value = false;
}

// 地图状态
const mapState = reactive({
	latitude: 39.909,
	longitude: 116.397,
	scale: 15,
	markers: [],
	circles: [{
		latitude: 39.909,
		longitude: 116.397,
		color: '#1989fa66',  // 透明度从33改为66
		fillColor: '#1989fa22', // 填充色从11改为22
		radius: 2000,
		strokeWidth: 2
	}]
})

// 搜索相关的响应式变量
const currentAddress = ref('')
const distanceOptions = Array.from({length: 20}, (_, i) => (i + 1).toString())
const selectedDistance = ref('2')
const keyword = ref('')

// 新增状态变量
const collectedItems = ref([]) // 只保留采集到的详细信息

// 根据搜索半径调整地图缩放级别
const adjustMapScale = (radius) => {
	// 根据半径大小动态调整放级别
	if (radius <= 1) return 15;
	if (radius <= 2) return 14;
	if (radius <= 5) return 13;
	if (radius <= 10) return 12;
	return 11;
}

// 获取当前位置和地址
const getCurrentLocation = () => {
	uni.showLoading({
		title: '定位中...'
	})

	uni.getLocation({
		type: 'gcj02',
		isHighAccuracy: true,
		success: (res) => {
			const latitude = res.latitude;
			const longitude = res.longitude;

			// 更新地图状态
			mapState.latitude = latitude;
			mapState.longitude = longitude;
			mapState.scale = adjustMapScale(Number(selectedDistance.value));
			
			// 更新圆形范围
			mapState.circles = [{
				latitude: latitude,
				longitude: longitude,
				color: '#1989fa66',  // 透明度从33改为66
				fillColor: '#1989fa22', // 填充色从11改为22
				radius: selectedDistance.value * 1000,
				strokeWidth: 2
			}]
			
			// 添加当前位置标记
			mapState.markers = [{
				id: 0,
				latitude: latitude,
				longitude: longitude,
				iconPath: '/static/local.png',
				// #ifdef H5
				width: 20,
				height: 20,
				// #endif
				// #ifdef APP-PLUS
				anchor: {
					x: 0.5,
					y: 0.5
				},
				width: '20px',
				height: '20px',
				// #endif
				callout: {
					content: '当前位置',
					color: '#000000',
					fontSize: 14,
					borderRadius: 4,
					padding: 8,
					display: 'ALWAYS'
				}
			}]

			// 获取详细地址
			uni.request({
				url: 'https://restapi.amap.com/v3/geocode/regeo',
				method: 'GET',
				data: {
					key: '7d6f9f3723fc6572aaf13328ba8a504e',
					location: `${longitude},${latitude}`,
					extensions: 'all',
					batch: false,
					roadlevel: 1,
					output: 'json'
				},
				success: (addressRes) => {
					uni.hideLoading()
					if (addressRes.data.status === '1' && addressRes.data.regeocode) {
						currentAddress.value = addressRes.data.regeocode.formatted_address;		
						realRegion.province = addressRes.data.regeocode.addressComponent.province;
						realRegion.city = addressRes.data.regeocode.addressComponent.city;
						realRegion.district = addressRes.data.regeocode.addressComponent.district;
						realRegion.provinceCode = addressRes.data.regeocode.addressComponent.provincecode;
						realRegion.cityCode = addressRes.data.regeocode.addressComponent.cityCode;
						realRegion.districtCode = addressRes.data.regeocode.addressComponent.adcode;
						
						// 定位完成后设置状态为 true
						isLocationReady.value = true
					} else {
						currentAddress.value = `${latitude},${longitude}`;
					}
				},
				fail: (error) => {
					uni.hideLoading()
					console.error('获取地址失败:', error);
					currentAddress.value = `${latitude},${longitude}`;
				}
			});
		},
		fail: (err) => {
			uni.hideLoading()
			console.error('获取位置失败:', err);
			uni.showToast({
				title: '获取位置失败',
				icon: 'none'
			});
		}
	});
}

// 初始化数据
const initData = () => {
	// 初始化地图状态
	mapState.latitude = 39.909
	mapState.longitude = 116.397
	mapState.scale = adjustMapScale(Number(selectedDistance.value))
	mapState.circles = [{
		latitude: 39.909,
		longitude: 116.397,
		color: '#1989fa66',  // 透明度从33改为66
		fillColor: '#1989fa22', // 填充色从11改为22
		radius: selectedDistance.value * 1000,
		strokeWidth: 2
	}]
	
	// 获取当前位置
	getCurrentLocation()
}

// 显示位置选择器
const showLocationPicker = () => {
	uni.chooseLocation({
		success: (res) => {

			currentAddress.value = res.address
			mapState.latitude = res.latitude
			mapState.longitude = res.longitude
			mapState.scale = adjustMapScale(Number(selectedDistance.value));
			
			// 更新圆形范围的位置
			mapState.circles = [{
				latitude: res.latitude,
				longitude: res.longitude,
				color: '#1989fa66',  // 透明度从33改为66
				fillColor: '#1989fa22', // 填充色从11改为22
				radius: selectedDistance.value * 1000,
				strokeWidth: 2
			}]

			// 添加新的位置标记
			mapState.markers = [{
				id: 0,
				latitude: res.latitude,
				longitude: res.longitude,
				iconPath: '/static/local.png',
				width: 32,
				height: 32,
				callout: {
					content: res.name || res.address,
					color: '#000000',
					fontSize: 14,
					borderRadius: 4,
					padding: 8,
					display: 'ALWAYS'
				}
			}]
		},
		fail: (err) => {
			console.error('选择位置失败:', err);
		}
	})
}

// 范围选择改变
const onDistanceChange = (e) => {
	selectedDistance.value = distanceOptions[e.detail.value]
	mapState.scale = adjustMapScale(Number(selectedDistance.value));
	
	// 更新圆形范围
	mapState.circles = [{
		latitude: mapState.latitude,
		longitude: mapState.longitude,
		color: '#1989fa66',  // 透明度从33改为66
		fillColor: '#1989fa22', // 填充色从11改为22
		radius: selectedDistance.value * 1000,
		strokeWidth: 2
	}]
}

// 修改 searchNearbyPOI 函数
const searchNearbyPOI = async () => {
	if (!keyword.value) {
		uni.showToast({
			title: '请输入关键词',
			icon: 'none'
		})
		return
	}

	uni.showLoading({
		title: '搜索中...'
	})

	try {
		let currentPage = 1
			let allData = []
			let hasMoreData = true
			
			// 循环获取所有页面的数据
			while (hasMoreData) {
				
      
				const pageData = await searchPOIByPage(currentPage)
				// 如果当前页有数据，添加到总数组中
				if (pageData && pageData.length > 0) {
					allData = [...allData, ...pageData]
					
			
					// 如果返回的数据少于50条，说明没有更多数据了
					if (pageData.length < 50) {
						hasMoreData = false
					} else {
						currentPage++
					}
				} else {
					hasMoreData = false
				}
			}
			
			// 更新收集到的数据
			collectedItems.value = allData
		// 发起接口
		

	 const data = {
		collect_address:`${realRegion.province}-${realRegion.city}-${realRegion.district}`,
		collect_time: formatDate(new Date()),
		collect_type: "1",
		key_words: keyword.value,
		collection_result: collectedItems.value,
		collect_location: `${mapState.latitude},${mapState.longitude}`,
	 }
	 
// console.log('keydata',data)
//   uni.request({
//     url: 'http://chat.ihealer.cn:9999/comboost/api/wechat/add_wx_records',
//     method: 'POST',
//     header: {
//         'Content-Type': 'application/json',
//         'token': uni.getStorageSync('token')
//     },
//     data: data
// }).then(res => {
// 	if (res.data.code == '401') {
// 		    uni.showToast({
// 		        title: '请求失效',
// 		        duration: 2000,
//             icon: 'none',
// 		    })
// 		    setTimeout(() => {
// 		        uni.reLaunch({
// 		            url: '/pages/login/index'
// 		        })
// 		    }, 2000)
// 		}
// 	  collect_batch_id.value = res.data.data.collect_batch_id
//     console.log('res',res)
// }).catch(err => {
//     console.error('请求失败:', err)
//     uni.showToast({
//         title: '保存失败',
//         icon: 'none'
//     })
// })
	


		// 更新地图标记
		if (collectedItems.value && collectedItems.value.length > 0) {
			updateMapMarkers(collectedItems.value)
			// 显示采集完成的提示
			modalContent.value = `采集完成，共采集到 ${collectedItems.value.length} 条数据`
			showModal.value = true
		} else {
			uni.showToast({
				title: '未找到相关位置',
				icon: 'none'
			})
		}
		
	} catch (error) {
		console.error('搜索失败:', error)
		uni.showToast({
			title: '搜索失败',
			icon: 'none'
		})
	} finally {
		uni.hideLoading()
	}
}

// 新增按页搜索的辅助函数
const searchPOIByPage = (page) => {
	return new Promise((resolve, reject) => {
		uni.request({
			url: 'https://restapi.amap.com/v3/place/text',
			method: 'GET',
			data: {
				key: '7d6f9f3723fc6572aaf13328ba8a504e',
				city: realRegion.districtCode,
				keywords: keyword.value,
				citylimit: true,
				offset: 50, // 每页记录数改为50
				page: page,
				extensions: 'all'
			},
			success: (res) => {
				if (res.data.status === '1' && res.data.pois) {
					console.log('res.data.pois222',res.data.pois)
					const pois = res.data.pois.map(poi => ({
						id: poi.id,
						name: poi.name,
						address: poi.address,
						tel: poi.tel || '暂无电话',
						location: poi.location,
						type: poi.type,
						distance: poi.distance,
						photos: poi?.photos[0]?.url || '',
						pcode: poi.pcode,
						adcode: poi.adcode,
						pname: poi.pname,
						adname: poi.adname,
						citycode: poi.citycode,
						bzi_type: poi.bzi_type,

					}))
					resolve(pois)
				} else {
					resolve([])
				}
			},
			fail: (err) => {
				reject(err)
			}
		})
	})
}

// 修改 updateMapMarkers 函数
const updateMapMarkers = (pois) => {
    mapState.markers = [
        // 保持当前位置的标记
        {
            id: 'current',
            latitude: mapState.latitude,
            longitude: mapState.longitude,
            iconPath: '/static/local.png',
            // #ifdef H5
            width: 20,
            height: 20,
            // #endif
            // #ifdef APP-PLUS
            anchor: {
                x: 0.5,
                y: 0.5
            },
            width: '20px',
            height: '20px',
            // #endif
            callout: {
                content: '当前位置',
                color: '#000000',
                fontSize: 14,
                borderRadius: 4,
                padding: 8,
                display: 'ALWAYS'
            }
        },
        // 添加搜索结果的标记，默认不显示信息窗口
        ...pois.map((poi, index) => {
            const [lng, lat] = poi.location.split(',')
            return {
                id: index + 1, // id从1开始，因为0是当前位置
                latitude: lat,
                longitude: lng,
                iconPath: '/static/marker.png', // 使用不同的图标区分
                // #ifdef H5
                width: 20,
                height: 20,
                // #endif
                // #ifdef APP-PLUS
                anchor: {
                    x: 0.5,
                    y: 0.5
                },
                width: '20px',
                height: '20px',
                // #endif
                callout: {
                    content: `${poi.name}\n${poi.tel || '暂无电话'}`,
                    color: '#000000',
                    fontSize: 14,
                    borderRadius: 4,
                    padding: 8,
                    display: 'BYCLICK' // 改为点击时显示
                }
            }
        })
    ]
}

// 添加地图标记点击事件处理函数
const onMarkerTap = (e) => {
    const markerId = e.detail.markerId
    // 如果点击的是当前位置标记，不做处理
    if (markerId === 'current') return
    
    // 找到对应的数据
    const poi = collectedItems.value[markerId - 1]
    if (poi) {
        // 可以在这里添加更多点击后的处理逻辑
        console.log('点击的POI:', poi)
    }
}

// 修改开始采集按钮的处理函数
const startCollect = () => {
	searchNearbyPOI()
}

// // 跳转到列表页面


// 页面加载时初始化
onMounted(() => {
	initData()
	const pages = getCurrentPages()
	const currentPage = pages[pages.length - 1]
	const options = currentPage.$page?.options
	
	// 如果有关键词参数，先保存到 urlKeyword
	if (options?.keyword) {
		urlKeyword.value = decodeURIComponent(options.keyword)
	}
})



// 在 script setup 部分添加 modal 相关的响应式变量
const showModal = ref(false)
const modalContent = ref('')

// 添加 modal 关闭的处理函数
const closeModal = () => {
    showModal.value = false
    // goToList() // 如果需要在关闭弹窗后跳转到列表页，可以取消注释这行
}

// 在搜索成功后添加
uni.setStorageSync('searchKeyword', keyword.value)

// 添加定位状态标志
const isLocationReady = ref(false)
// 添加 URL 参数缓存
const urlKeyword = ref('')

// 监听定位状态
watch(isLocationReady, (newVal) => {
	if (newVal && urlKeyword.value) {
		// 定位完成且有关键词时，设置关键词并开始采集
		keyword.value = urlKeyword.value
		startCollect()
	}
})

// 获取状态栏高度
const statusBarHeight = ref(20)

// 处理返回按钮点击
const onBackClick = () => {
    uni.navigateBack({
        delta: 1
    })
}

// 处理记录按钮点击
const onRecordClick = () => {
    uni.navigateTo({
        url: '/pages/task/history'
    })
}
</script>

<style>
/* nvue页面只支持flex布局 */
.container {
	flex: 1;
	flex-direction: column;
	background-color: #f0f2f5;
}

.search-area {
	background-image: linear-gradient(to bottom, #ffffff, #f8f9fc);
	padding: 20rpx;
	margin: 20rpx;
	border-radius: 16rpx;
}

.search-item {
	margin-bottom: 16rpx;
}

.search-item:last-child {
	margin-bottom: 0;
}

.input-box {
	height: 80rpx;
	background-color: rgba(25, 137, 250, 0.05);
	border-width: 2rpx;
	border-style: solid;
	border-color: rgba(25, 137, 250, 0.1);
	border-radius: 12rpx;
	padding-left: 24rpx;
	padding-right: 24rpx;
	flex-direction: row;
	align-items: center;
	justify-content: space-between;
}

/* 文字颜色和大小设置 */
.input-box-text {
    color: #333333;
    font-size: 14px;
}

.map-container {
	flex: 1;
	margin: 0 20rpx 20rpx;
	border-radius: 16rpx;
	position: relative;
}

.map {
	flex: 1;
	width: 750rpx;
	border-radius: 16rpx;
}

.footer {
    padding: 10px;
    flex-direction: column;
}

.collect-btn {
    height: 44px;
    line-height: 44px;
    background-color: #1989fa;
    border-radius: 22px;
    /* 文字样式 */
    color: #ffffff;
    font-size: 16px;
    font-weight: 500;
    text-align: center;
}

/* 输入框特定样式 */
.search-item-input {
    flex: 1;
    height: 45px;
    font-size: 16px;
    color: #333333;
}

/* placeholder样式 */
.placeholder {
    color: #999999;
    font-size: 14px;
}

/* 省市区选择器容器 */
.picker-container {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: #ffffff;
}

/* 弹窗样式调整 */
.modal-content {
    padding: 15px;
    align-items: center;
}

.modal-text {
    font-size: 16px;
    color: #333333;
    text-align: center;
    margin-bottom: 15px;
}

.nav-bar {
    background-color: #ffffff;
    border-bottom: 1px solid #eee;
}

.nav-content {
    height: 52px;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    padding: 15px;
}

.nav-left {
    width: 44px;
    align-items: flex-start;
    padding-top: 4px;
}

.nav-title {
    flex: 1;
    text-align: center;
    font-size: 16px;
    color: #000000;
    font-weight: 500;
}

.nav-right {
    width: 44px;
    align-items: flex-end;
    padding-top: 4px;
}
</style> 